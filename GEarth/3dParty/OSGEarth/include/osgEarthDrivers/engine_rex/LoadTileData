/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2014 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_REX_LOAD_TILE_DATA
#define OSGEARTH_REX_LOAD_TILE_DATA 1

#include "Common"
#include <osgEarth/TerrainTileModelFactory>
#include <memory>

namespace osgEarth {
    class TerrainEngineNode;
}

namespace osgEarth { namespace REX
{
    using namespace osgEarth;

    class TileNode;
    class EngineContext;

    /**
     * Handles the loading of data of an individual tile node
     */
    class LoadTileDataOperation
    {
    public:
        LoadTileDataOperation(
            TileNode* tilenode,
            EngineContext* factory);

        //! New tile data request for a subset of layers (in the manifest)
        LoadTileDataOperation(
            const CreateTileManifest& manifest,
            TileNode* tilenode,
            EngineContext* context);

        virtual ~LoadTileDataOperation();

        //! Whether to allow the request to cancel midstream. Default is true
        void setEnableCancelation(bool value) { _enableCancel = value; }

        //! Dispatch the job.
        bool dispatch(bool async = true);

        //! Merge the results into the TileNode
        bool merge();

        using LoadResult= osg::ref_ptr<TerrainTileModel>;
        Future<LoadResult> _result;
        CreateTileManifest _manifest;
        bool _enableCancel;
        osg::observer_ptr<TileNode> _tilenode;
        osg::observer_ptr<TerrainEngineNode> _engine;
        std::string _name;
        bool _dispatched;
        bool _merged;
    };

    typedef std::shared_ptr<LoadTileDataOperation> LoadTileDataOperationPtr;

} } // namespace osgEarth::REX

#endif // OSGEARTH_REX_LOAD_TILE_DATA
